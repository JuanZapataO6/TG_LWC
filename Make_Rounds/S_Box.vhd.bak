library IEEE;
library work;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use ieee.std_logic_misc.all;
use work.all;
--
entity S_Box is
    port(
        --Verificar entradas tipo arreglo 
        a0_in   : in  std_logic_vector(15 downto 0);
        a1_in   : in  std_logic_vector(15 downto 0);
        b0_in   : in  std_logic_vector(15 downto 0);
        b1_in   : in  std_logic_vector(15 downto 0);
        c0_in   : in  std_logic_vector(15 downto 0);
        c1_in   : in  std_logic_vector(15 downto 0);
        d0_in   : in  std_logic_vector(15 downto 0);
        d1_in   : in  std_logic_vector(15 downto 0);
        a0_out  : out std_logic_vector(15 downto 0);
        a1_out  : out std_logic_vector(15 downto 0);
        b0_out  : out std_logic_vector(15 downto 0);
        b1_out  : out std_logic_vector(15 downto 0);
        c0_out  : out std_logic_vector(15 downto 0);
        c1_out  : out std_logic_vector(15 downto 0);
        d0_out  : out std_logic_vector(15 downto 0);
        d1_out  : out std_logic_vector(15 downto 0);
        clk     : in  std_logic
    );
end S_Box;
architecture Main of S_Box is 
    
    type estado is (s0,s1,s2,s3,s4,s5,s6,s7,s8);
    signal presente:estado:=s0;
    
    begin
    ASM: process (a0_in,b0_in,c0_in,d0_in,
            a1_in,b1_in,c1_in,d1_in,
            clk,presente)
    begin
        if (CLK'event AND CLK = '1') then
            case presente is 
                when s0=>
                    presente <= s1;
                when s1=>
                    presente <= s2;
                    a0_in <= a0_in xor (b0_in AND c0_in);
                    a1_in <= a1_in xor (b1_in AND c1_in);
                when s2=>
                    presente <= s3;
                    b0_in <= b0_in xor (a0_in or d0_in);
                    b1_in <= b1_in xor (a1_in or d1);
                when s3=>
                    presente <= s4;
                    d0_in <= d0_in xor (b0_in or c0_in);
                    d1_in <= d1_in xor (b1_in or c1_in);
                when s4=>
                    presente <= s5;
                    c0_in <= c0_in xor (b0_in and d0_in);
                    c1_in <= c1_in xor (b1_in and d1_in);
                when s5=>
                    presente <= s6;
                    b0_in <= b0_in xor (a0_in or c0_in);
                    b1_in <= b1_in xor (a1_in or c1_in);
                when s6=>
                    presente <= s7;
                    a0_in <= a0_in xor (b0_in or d0_in);
                    a1_in <= a1_in xor (b1_in or d1_in);
                when s7=>
                    presente <=s0;
                    a0_out a1 <=b0_in;
                    a0_out  <=c0_in;
                    a0_out  <=d0_in;
                    a0_out  <=a0_in;                    
                    a0_out  <=d1_in;
                    a0_out  <=b1_in;
                    a0_out  <=a1_in;
                    a0_out  <=c1_in;
                    
                when others => null;
            end case;
        end if;
    end process ASM;
end Main;